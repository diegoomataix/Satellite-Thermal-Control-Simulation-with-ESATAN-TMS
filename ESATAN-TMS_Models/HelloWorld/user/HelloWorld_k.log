/* ESATAN-TMS version 2020, run date 9:57 Tue 13 Apr 2021 */
BEGIN_MODEL HelloWorld WORKBENCH_V1 ;
RADIATIVE_CASE Rad_01;
DEFINE_RADIATIVE_CASE(
    radiative_case = Rad_01,
    title = "",
    description = "",
    geometry = "Whole Model",
    environment = TRUE,
    mission_type = "ORBITAL",
    init_time = 0.0,
    prop_env = ""
);

DEFINE_MISSION(
    radiative_case = Rad_01,
    orbit_centre = "PLANET",
    planet_radius = 6371000.0,
    sun_radius = 6.958E8,
    sun_distance = 1.5001172249E11,
    solar_decln = 9.094,
    sun_alpha = 21.653,
    orbital_precession = 0.0,
    gc = 9.798,
    celestial_body_image = "Earth",
    omega = 0.0,
    incln = 0.0,
    alpha = 0.0,
    alt_p = 800000.0,
    alt_a = 800000.0,
    init_anomaly = 0.0,
    final_anomaly = 360.0,
    position_method = "ANGLE",
    angle_gap = 45.0,
    eclipse_points = TRUE,
    eclipse_offset = 0.5,
    orientation = "POINTING",
    primary_vector = [0.0, 0.0, 1.0],
    primary_direction = "ZENITH",
    second_vector = [0.0, 1.0, 0.0],
    second_direction = "VELOCITY",
    primary_gen_vector = [1.0, 0.0, 0.0],
    second_gen_vector = [0.0, -1.0, 0.0],
    init_phi = 0.0,
    init_psi = 0.0,
    init_omega = 0.0,
    phi_rot_rate = 0.0,
    psi_rot_rate = 0.0,
    omega_rot_rate = 0.0,
    euler_order = "phi, psi, omega",
    spinning_craft = FALSE,
    rotation_rate = 0.0,
    sun_temperature = 5778.0,
    planet_temperature_method = "UNIFORM",
    planet_temperature = 254.3,
    planet_albedo_method = "UNIFORM",
    albedo_reflect_coeff = 0.306,
    planet_infra_red_emissivity = 1.0,
    solar_const_override = 0.0,
    sun_size_finite = FALSE,
    sun_distance_override = 0.0,
    day_period = 86400.0
);


GC = EVAL(Rad_01.GC);
R_PLANET = EVAL(Rad_01.ORBIT.PLANET_RADIUS);
R_SUN = EVAL(Rad_01.ORBIT.SUN_RADIUS);
IF (EVAL(Rad_01.SUN_DISTANCE_OVERRIDE) == 0.0) THEN
    SUN_PLANET_DIST = EVAL(Rad_01.ORBIT.SUN_DISTANCE);
ELSE
    SUN_PLANET_DIST = EVAL(Rad_01.SUN_DISTANCE_OVERRIDE);
END_IF
T_SUN = EVAL(Rad_01.T_SUN);
SOLAR_DECLINATION = EVAL(Rad_01.ORBIT.SOLAR_DECLN);

PROP_ENV = Rad_01.PROP_ENV;

DEFINE_ACCURACY (
	radiative_case = Rad_01,
	control_method = "FIXED_RAYS",
	ray_total_cutoff = 5.0e-03,
	coupling_min_rays_normal = 10000,
	coupling_min_rays_critical = 100000,
	coupling_min_rays_non_critical = 1000,
	hf_min_rays_normal = 10000,
	hf_min_rays_critical = 100000,
	hf_min_rays_non_critical = 1000,
	seed = 1000,
	extinct = 1.0e-03);

GC = EVAL(Rad_01.GC);
R_PLANET = EVAL(Rad_01.ORBIT.PLANET_RADIUS);
R_SUN = EVAL(Rad_01.ORBIT.SUN_RADIUS);
IF (EVAL(Rad_01.SUN_DISTANCE_OVERRIDE) == 0.0) THEN
    SUN_PLANET_DIST = EVAL(Rad_01.ORBIT.SUN_DISTANCE);
ELSE
    SUN_PLANET_DIST = EVAL(Rad_01.SUN_DISTANCE_OVERRIDE);
END_IF
T_SUN = EVAL(Rad_01.T_SUN);
SOLAR_DECLINATION = EVAL(Rad_01.ORBIT.SOLAR_DECLN);

PROP_ENV = Rad_01.PROP_ENV;

INTEGER radiative_case_error_flag = 0;
FOR (orbit_index = 1;
    orbit_index <= Rad_01.NUM_ORBIT_POSITIONS;
    orbit_index = EVAL(orbit_index + 1))

    CALCULATE (
        radiative_case = Rad_01,
        calc_types = "REF, PDF, ALBEDO_PDF, SAF, PAF, ALBEDO_PAF",
        pos_index = orbit_index,
        eclipse_check = TRUE,
        error_code = radiative_case_error_flag)
   /* Warning Error: current function is calculate:  */
   /* Calculating PDF: VF must be calculated first for pos_index 1.
      Error number: 696 */

   /* Warning Error: current function is update error variable */
   /* error during kernel procedure call (value of error code = 5) */
;

END_FOR

   /* Warning Error: current function is calculate:  */
   /* Calculating PDF: VF must be calculated first for pos_index 2.
      Error number: 696 */

   /* Warning Error: current function is update error variable */
   /* error during kernel procedure call (value of error code = 5) */

   /* Warning Error: current function is calculate:  */
   /* Calculating PDF: VF must be calculated first for pos_index 3.
      Error number: 696 */

   /* Warning Error: current function is update error variable */
   /* error during kernel procedure call (value of error code = 5) */

   /* Warning Error: current function is calculate:  */
   /* Calculating PDF: VF must be calculated first for pos_index 4.
      Error number: 696 */

   /* Warning Error: current function is update error variable */
   /* error during kernel procedure call (value of error code = 5) */

   /* Warning Error: current function is calculate:  */
   /* Calculating PDF: VF must be calculated first for pos_index 5.
      Error number: 696 */

   /* Warning Error: current function is update error variable */
   /* error during kernel procedure call (value of error code = 5) */

   /* Warning Error: current function is calculate:  */
   /* Calculating PDF: VF must be calculated first for pos_index 6.
      Error number: 696 */

   /* Warning Error: current function is update error variable */
   /* error during kernel procedure call (value of error code = 5) */

   /* Warning Error: current function is calculate:  */
   /* Calculating PDF: VF must be calculated first for pos_index 7.
      Error number: 696 */

   /* Warning Error: current function is update error variable */
   /* error during kernel procedure call (value of error code = 5) */

   /* Warning Error: current function is calculate:  */
   /* Calculating PDF: VF must be calculated first for pos_index 8.
      Error number: 696 */

   /* Warning Error: current function is update error variable */
   /* error during kernel procedure call (value of error code = 5) */

   /* Warning Error: current function is calculate:  */
   /* Calculating PDF: VF must be calculated first for pos_index 9.
      Error number: 696 */

   /* Warning Error: current function is update error variable */
   /* error during kernel procedure call (value of error code = 5) */

   /* Warning Error: current function is calculate:  */
   /* Calculating PDF: VF must be calculated first for pos_index 10.
      Error number: 696 */

   /* Warning Error: current function is update error variable */
   /* error during kernel procedure call (value of error code = 5) */

   /* Warning Error: current function is calculate:  */
   /* Calculating PDF: VF must be calculated first for pos_index 11.
      Error number: 696 */

   /* Warning Error: current function is update error variable */
   /* error during kernel procedure call (value of error code = 5) */

   /* Warning Error: current function is calculate:  */
   /* Calculating PDF: VF must be calculated first for pos_index 12.
      Error number: 696 */

   /* Warning Error: current function is update error variable */
   /* error during kernel procedure call (value of error code = 5) */

   /* Warning Error: current function is calculate:  */
   /* Calculating PDF: VF must be calculated first for pos_index 13.
      Error number: 696 */

   /* Warning Error: current function is update error variable */
   /* error during kernel procedure call (value of error code = 5) */
DELETE radiative_case_error_flag;

DEFINE_ACCURACY (
	radiative_case = Rad_01,
	control_method = "FIXED_RAYS",
	ray_total_cutoff = 5.0e-03,
	coupling_min_rays_normal = 10000,
	coupling_min_rays_critical = 100000,
	coupling_min_rays_non_critical = 1000,
	hf_min_rays_normal = 10000,
	hf_min_rays_critical = 100000,
	hf_min_rays_non_critical = 1000,
	seed = 1000,
	extinct = 1.0e-03);

GC = EVAL(Rad_01.GC);
R_PLANET = EVAL(Rad_01.ORBIT.PLANET_RADIUS);
R_SUN = EVAL(Rad_01.ORBIT.SUN_RADIUS);
IF (EVAL(Rad_01.SUN_DISTANCE_OVERRIDE) == 0.0) THEN
    SUN_PLANET_DIST = EVAL(Rad_01.ORBIT.SUN_DISTANCE);
ELSE
    SUN_PLANET_DIST = EVAL(Rad_01.SUN_DISTANCE_OVERRIDE);
END_IF
T_SUN = EVAL(Rad_01.T_SUN);
SOLAR_DECLINATION = EVAL(Rad_01.ORBIT.SOLAR_DECLN);

PROP_ENV = Rad_01.PROP_ENV;

INTEGER radiative_case_error_flag = 0;
FOR (orbit_index = 1;
    orbit_index <= Rad_01.NUM_ORBIT_POSITIONS;
    orbit_index = EVAL(orbit_index + 1))

    CALCULATE (
        radiative_case = Rad_01,
        calc_types = "VF, REF, SDF, PDF, ALBEDO_PDF, SAF, PAF, ALBEDO_PAF",
        pos_index = orbit_index,
        eclipse_check = TRUE,
        error_code = radiative_case_error_flag);

END_FOR
DELETE radiative_case_error_flag;

/* ESATAN-TMS version 2020, run date 10:50 Tue 20 Apr 2021 */
/* BEGIN_MODEL HelloWorld WORKBENCH_V1 */ ;
/* ESATAN-TMS version 2020, run date 9:37 Tue 27 Apr 2021 */
/* BEGIN_MODEL HelloWorld WORKBENCH_V1 */ ;
